import { NextRequest, NextResponse } from 'next/server';
import { stockService } from '@/lib/services/stockService';
import { StockCategory } from '@/lib/models/stock';

// Force dynamic runtime to prevent static generation
export const runtime = 'nodejs';
export const dynamic = 'force-dynamic';

// In-memory conversation storage (in production, use Redis or database)
const conversationContext = new Map<string, {
  messages: Array<{role: 'user' | 'assistant', content: string}>;
  criticalStockData?: any[];
  categoryData?: any;
  lastDataFetch?: number;
}>();

export async function POST(request: NextRequest) {
  try {
    const { message, conversationId = 'default', messages = [] } = await request.json();

    if (!message) {
      return NextResponse.json({ error: 'Mesaj gerekli' }, { status: 400 });
    }

    // OpenAI API anahtarƒ±nƒ± kontrol et
    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json({ 
        error: '‚ùå OpenAI API anahtarƒ± eksik! L√ºtfen .env.local dosyasƒ±na OPENAI_API_KEY ekleyin.' 
      }, { status: 500 });
    }

    // MongoDB baƒülantƒ±sƒ±nƒ± kontrol et
    if (!process.env.MONGODB_URI || process.env.MONGODB_URI.includes('your_mongodb_connection_string_here')) {
      return NextResponse.json({ 
        error: '‚ùå MongoDB baƒülantƒ±sƒ± eksik! L√ºtfen .env.local dosyasƒ±nda MONGODB_URI ayarlayƒ±n.' 
      }, { status: 500 });
    }

    // Get or create conversation context
    let context = conversationContext.get(conversationId);
    if (!context) {
      context = {
        messages: [],
        lastDataFetch: 0
      };
      conversationContext.set(conversationId, context);
    }

    // Add user message to context
    context.messages.push({ role: 'user', content: message });

    // Check if we need to refresh data (refresh every 5 minutes)
    const shouldRefreshData = !context.lastDataFetch || 
                             (Date.now() - context.lastDataFetch) > 300000;

    // √ñzel komutlarƒ± kontrol et ve context'e kaydet
    let specialResponse = null;
    let contextualData = '';
    
    // Kritik stok sorgusu
    if (message.toLowerCase().includes('kritik stok') || 
        message.toLowerCase().includes('azalan √ºr√ºn') ||
        message.toLowerCase().includes('kritik seviye')) {
      try {
        const criticalItems = await stockService.getCriticalStockItems();
        context.criticalStockData = criticalItems;
        context.lastDataFetch = Date.now();
        
        specialResponse = {
          type: 'critical_stock',
          data: criticalItems,
          message: `üö® ${criticalItems.length} √ºr√ºn kritik stok seviyesinde!`
        };
        
        contextualData = `G√úNCEL KRƒ∞Tƒ∞K STOK VERƒ∞LERƒ∞:\n${criticalItems.map(item => 
          `- ${item.malzemeTanimi} (${item.stokKodu}): ${item.mevcutStok}/${item.kritikSeviye} ${item.olcuBirimi}`
        ).join('\n')}\n\n`;
      } catch (error) {
        console.error('Kritik stok hatasƒ±:', error);
      }
    }
    
    // Kategori sorgusu
    const categories = ["Et √úr√ºnleri", "Beyaz Et", "Deniz √úr√ºnleri", "Meyveler", "Sebzeler", "Bakliyat & Tahƒ±l", "Diƒüer"];
    for (const category of categories) {
      if (message.toLowerCase().includes(category.toLowerCase())) {
        try {
          const categoryItems = await stockService.getStockByCategory(category as StockCategory);
          context.categoryData = { category, items: categoryItems };
          context.lastDataFetch = Date.now();
          
          specialResponse = {
            type: 'category',
            data: categoryItems,
            category: category,
            message: `üì¶ ${category} kategorisinde ${categoryItems.length} √ºr√ºn bulundu.`
          };
          
          contextualData = `G√úNCEL ${category.toUpperCase()} KATEGORƒ∞ VERƒ∞LERƒ∞:\n${categoryItems.slice(0, 10).map(item => 
            `- ${item.malzemeTanimi} (${item.stokKodu})`
          ).join('\n')}\n\n`;
        } catch (error) {
          console.error('Kategori hatasƒ±:', error);
        }
      }
    }
    
    // Genel durum sorgusu
    if (message.toLowerCase().includes('genel durum') || 
        message.toLowerCase().includes('stok durumu') ||
        message.toLowerCase().includes('toplam √ºr√ºn')) {
      try {
        const stats = await stockService.getOverallStats();
        context.lastDataFetch = Date.now();
        
        specialResponse = {
          type: 'overall_stats',
          data: stats,
          message: `üìä Toplam ${stats.totalProducts} √ºr√ºn, ${stats.summary.totalCategories} kategori`
        };
      } catch (error) {
        console.error('Genel durum hatasƒ±:', error);
      }
    }

    // √úr√ºn kodu sorgusu (sadece sayƒ±)
    const numberMatch = message.match(/^\d+$/);
    if (numberMatch) {
      try {
        const item = await stockService.getItemByCode(numberMatch[0]);
        specialResponse = {
          type: 'item_details',
          data: item,
          message: item ? `‚úÖ ${item.malzemeTanimi} √ºr√ºn√º bulundu.` : `‚ùå ${numberMatch[0]} √ºr√ºn kodu bulunamadƒ±.`
        };
      } catch (error) {
        console.error('√úr√ºn kodu hatasƒ±:', error);
      }
    }

    // Analiz sorgularƒ± - √∂nceki verilerle analiz yap
    const analysisKeywords = [
      'acil', '√∂ncelik', 'sipari≈ü', '√∂nemli', 'kritik', 'analiz', '√∂neri',
      'hangi √ºr√ºn', 'ne sipari≈ü', 'hangi stok', 'acil sipari≈ü'
    ];
    
    const isAnalysisQuery = analysisKeywords.some(keyword => 
      message.toLowerCase().includes(keyword.toLowerCase())
    );

    if (isAnalysisQuery && context.criticalStockData) {
      contextualData = `MEVCUT KRƒ∞Tƒ∞K STOK VERƒ∞LERƒ∞ (Analiz i√ßin kullan):\n${context.criticalStockData.map(item => 
        `- ${item.malzemeTanimi} (Kod: ${item.stokKodu}): Mevcut ${item.mevcutStok} ${item.olcuBirimi}, Kritik seviye: ${item.kritikSeviye} ${item.olcuBirimi}, Durum: ${item.mevcutStok === 0 ? 'STOK YOK' : 'KRƒ∞Tƒ∞K SEVIYE'}`
      ).join('\n')}\n\n`;
    }

    // Build conversation history for OpenAI
    const conversationMessages = [
      {
        role: 'system' as const,
        content: `Sen bir otel stok y√∂netim sistemi asistanƒ±sƒ±n. 
T√ºrk√ße konu≈üan otel √ßalƒ±≈üanlarƒ±na yardƒ±m ediyorsun.
Stok √∂ƒüeleri, envanter durumu ve alternatif √ºr√ºnler hakkƒ±nda bilgi veriyorsun.
Her zaman dost√ßa ve yardƒ±msever ol.
Yanƒ±tlarƒ±nƒ± T√ºrk√ße ver.

MEVCUT KATEGORƒ∞LER:
- Et √úr√ºnleri (dana, kuzu, kƒ±rmƒ±zƒ± et)
- Beyaz Et (tavuk, hindi, kanatlƒ±) 
- Deniz √úr√ºnleri (balƒ±k, deniz √ºr√ºnleri)
- Meyveler (taze meyveler)
- Sebzeler (taze sebzeler)
- Bakliyat & Tahƒ±l (tahƒ±llar, bakliyat)
- Diƒüer (diƒüer √ºr√ºnler)

√ñNEMLI: Eƒüer kullanƒ±cƒ± analiz, √∂ncelik, sipari≈ü konularƒ±nda sorular soruyorsa, daha √∂nce saƒülanan kritik stok verilerini kullanarak detaylƒ± analiz yap.

Kritik stok analizinde ≈üu fakt√∂rleri g√∂z √∂n√ºnde bulundur:
1. Stok seviyesi (0 = acil, kritik seviye altƒ± = √∂nemli)
2. √úr√ºn t√ºr√º (temel gƒ±da maddeleri √∂ncelikli)
3. Kategori √∂nem sƒ±rasƒ± (Et > Sebze > Diƒüer)
4. Stok kritik seviyesine g√∂re aciliyet

${contextualData}

Kullanƒ±cƒ±nƒ±n sorusuna kƒ±sa ve yararlƒ± bir yanƒ±t ver. Eƒüer √∂zel stok verisi varsa, onu kullan.`
      },
      // Add conversation history (last 10 messages to avoid token limit)
      ...context.messages.slice(-10).map(msg => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content
      }))
    ];

    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: conversationMessages,
        max_tokens: 600,
        temperature: 0.7,
      }),
    });

    if (!openaiResponse.ok) {
      const errorData = await openaiResponse.json();
      console.error('OpenAI API hatasƒ±:', errorData);
      return NextResponse.json({ 
        error: '‚ùå AI servisi ≈üu anda kullanƒ±lamƒ±yor. L√ºtfen tekrar deneyin.' 
      }, { status: 500 });
    }

    const aiData = await openaiResponse.json();
    const aiMessage = aiData.choices[0]?.message?.content || '√úzg√ºn√ºm, cevap √ºretemiyorum.';

    // Add assistant response to context
    context.messages.push({ role: 'assistant', content: aiMessage });

    // Keep only last 20 messages to prevent memory overflow
    if (context.messages.length > 20) {
      context.messages = context.messages.slice(-20);
    }

    return NextResponse.json({
      message: aiMessage,
      specialData: specialResponse,
      conversationId: conversationId
    });

  } catch (error) {
    console.error('Chat API hatasƒ±:', error);
    return NextResponse.json({ 
      error: '‚ùå Bir hata olu≈ütu. L√ºtfen tekrar deneyin.' 
    }, { status: 500 });
  }
} 